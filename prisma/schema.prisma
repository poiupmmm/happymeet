// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 基本用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  location    String
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关系
  creatorId   String
  creator     User     @relation("GroupCreator", fields: [creatorId], references: [id])
  members     GroupMember[]
  events      Event[]
  messages    Message[]
}

model GroupMember {
  id        String   @id @default(cuid())
  role      String   @default("MEMBER") // ADMIN, MODERATOR, MEMBER
  joinedAt  DateTime @default(now())

  // 关系
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String
  latitude    Float
  longitude   Float
  maxMembers  Int
  price       Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关系
  creatorId   String
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id])
  groupId     String
  group       Group    @relation(fields: [groupId], references: [id])
  members     EventMember[]
  comments    Comment[]
}

model EventMember {
  id        String   @id @default(cuid())
  status    String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  joinedAt  DateTime @default(now())

  // 关系
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // 关系
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // EVENT_REMINDER, NEW_MEMBER, GROUP_UPDATE
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // 关系
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Membership {
  id        String   @id @default(cuid())
  type      String   // FREE, PREMIUM
  startDate DateTime @default(now())
  endDate   DateTime?

  // 关系
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
} 